Nombres
	Roman Aguilar Thom Maurick
	Huaranca Rivas Erick

1.-
	1 - b
	2 - c
	4 - d
	5 - e
	
2.-
#include <iostream>
#include <string> 
using namespace std;
 
int main(){
    int matrix[3][3] = {{1,2,123},{1,30,4157},{1,2,56}};
    for(int row=0;row<3;row++)
      for(int column=0;column<3;column++){
        string s = to_string(matrix[row][column]);
        cout<<"matriz["<<row<<"]["<<column<<"] = "<<s<<", size : "<<s.length()<<"\n";
      }
    return 0;
}
3.-
#include <iostream>
#include <string> 
using namespace std;
 
int main(){
    int matrix[3][3] = {{1,2,123},{1,30,4157},{1,2,56}};
    for(int row=0;row<3;row++){
      int aux = matrix[0][row];
      matrix[0][row] = matrix[0][2];
      matrix[0][2] =  aux;
    }
    return 0;
}
4
a)
public class Ejemplo {
    
    public Arreglo array = new Arreglo(); ;
    
    public void list(){
        
    }
    
    public void addItem (int item){
        
        array.addItem(item);
    }
    
}
b)
public class Arreglo {

    private int[] n;
    private int indice;

    public Arreglo() {
        
        this.indice = 0;
        this.n = new int[10];
        
    }
    
        /*operaciones publicas bÃ¡sicas*/
    
    /*public int sizeA(){
        int cant = 0;
        
        for (int i = 0; i < 10; i++) {
            if( this.n[i] ){
                cant++;
            }
        }
        
        return cant;
    }*/
    
    public int lenght (){
        
        return this.n.length;
        
    }
    
    public int getNumber( int position ) {
        
        return this.n[position];
        
    }
    
    public void addItem( int item ) {
        
        if ( this.indice != this.n.length )
            this.n[indice] = item;
        
    }
    
    public void ampliarArray(){
        
        
    }
    
    /*operaciones publicas complementarias*/
    
    /*public void deleteEnd(){
        
        this.n.
        
    }*/
    
    public void deleteAll(){
        
        this.n = new int[10];
        
    }
    
}



5.-
a)
#include <iostream>
using namespace std;
class Persona{
	private :
		string nombre;
		int id;
	public :
		Persona(string nombre,int id){
			this->nombre=nombre;
			this->id=id;
		}
		string getNombre(){
			return nombre;
		}
		int getID(){
			return id;
		}
		void setNombre(string nombre){
			this->nombre=nombre;
		}
		void toString(){
			cout<<id<<"\t";
			if(nombre.length()<8){
				cout<<nombre<<"\t\t";
			}else{
				cout<<nombre<<"\t";
			}
		}
};
class Alumno : public Persona{
	private :
    string code;
	public :
		Alumno(string nombre,int id,string code):Persona(nombre,id){
      this->code = code;
		}
		
		string getCode(){
			return code;
		}
		
		void setCode(string code){
			this->code = code;
		}
		void toString(){
			cout<<"\n";
			Persona::toString();
			cout<<code<<" $\n";
		}
		
		
};
int main() {
  Alumno alumno = Alumno("Erick",30,"12334");
  alumno.toString();
}
b)
public class Persona{}
public class Alumno extends Persona{}

6
class Main {
  public static void main(String[] args) {
    int[][] matrix = {
      {0,0,1,0,0,0,0,0,0,0},
      {1,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,1},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,1,0,0,0,0,0},
      {0,0,1,0,0,0,0,0,0,0}
    };
  }
  public static void getBordeSuperior(int[][] matrix){
      for(int column=0;column<matrix[0].length;column++){
        if(matrix[0][column]==1){

          System.out.println("posicion : ["+0+"]["+"["+column+"]"+" = "+1);
        }
      }
  }
  public static void getBordeInferior(int[][] matrix){
    for(int column=0;column<matrix[0].length;column++){
        if(matrix[matrix[0].length-1][column]==1){

          System.out.println("posicion : ["+0+"]["+"["+column+"]"+" = "+1);
        }
      }

  }
  public static void getBordeIzquierdo(int[][] matrix){
      for(int row=0;row<matrix[0].length;row++){
        if(matrix[row][0]==1){

          System.out.println("posicion : ["+row+"]["+"["+0+"]"+" = "+1);
        }
      }
  }
  public static void getBordeDerecho(int[][] matrix){
    for(int row=0;row<matrix[0].length;row++){
        if(matrix[row][matrix[0].length-1]==1){
	  System.out.println("posicion : ["+row+"]["+"["+matrix[0].length-1+"]"+" = "+1);
        }
      }
  }
}